// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// backtrack_pf
void backtrack_pf(arma::cube& alpha, arma::umat& ind);
RcppExport SEXP bssm_backtrack_pf(SEXP alphaSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::cube& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type ind(indSEXP);
    backtrack_pf(alpha, ind);
    return R_NilValue;
END_RCPP
}
// cholupdate
arma::mat cholupdate(arma::mat L, arma::vec u);
RcppExport SEXP bssm_cholupdate(SEXP LSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    __result = Rcpp::wrap(cholupdate(L, u));
    return __result;
END_RCPP
}
// choldowndate
arma::mat choldowndate(arma::mat L, arma::vec u);
RcppExport SEXP bssm_choldowndate(SEXP LSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    __result = Rcpp::wrap(choldowndate(L, u));
    return __result;
END_RCPP
}
// dmvnorm1
double dmvnorm1(const arma::vec& x, const arma::vec& mean, const arma::mat& sigma, bool lwr, bool logd);
RcppExport SEXP bssm_dmvnorm1(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP lwrSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lwr(lwrSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    __result = Rcpp::wrap(dmvnorm1(x, mean, sigma, lwr, logd));
    return __result;
END_RCPP
}
// dmvnorm2
arma::vec dmvnorm2(const arma::mat& x, const arma::mat& mean, arma::mat sigma, bool lwr, bool logd, const arma::mat& A);
RcppExport SEXP bssm_dmvnorm2(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP lwrSEXP, SEXP logdSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lwr(lwrSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    __result = Rcpp::wrap(dmvnorm2(x, mean, sigma, lwr, logd, A));
    return __result;
END_RCPP
}
// intervals
arma::mat intervals(arma::mat& means, const arma::mat& sds, const arma::vec& probs, unsigned int n_ahead);
RcppExport SEXP bssm_intervals(SEXP meansSEXP, SEXP sdsSEXP, SEXP probsSEXP, SEXP n_aheadSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    __result = Rcpp::wrap(intervals(means, sds, probs, n_ahead));
    return __result;
END_RCPP
}
// bsm_loglik
double bsm_loglik(const List& model_);
RcppExport SEXP bssm_bsm_loglik(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    __result = Rcpp::wrap(bsm_loglik(model_));
    return __result;
END_RCPP
}
// bsm_filter
List bsm_filter(const List& model_);
RcppExport SEXP bssm_bsm_filter(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    __result = Rcpp::wrap(bsm_filter(model_));
    return __result;
END_RCPP
}
// bsm_fast_smoother
arma::mat bsm_fast_smoother(const List& model_);
RcppExport SEXP bssm_bsm_fast_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    __result = Rcpp::wrap(bsm_fast_smoother(model_));
    return __result;
END_RCPP
}
// bsm_sim_smoother
arma::cube bsm_sim_smoother(const List& model_, unsigned int nsim, unsigned int seed);
RcppExport SEXP bssm_bsm_sim_smoother(SEXP model_SEXP, SEXP nsimSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(bsm_sim_smoother(model_, nsim, seed));
    return __result;
END_RCPP
}
// bsm_smoother
List bsm_smoother(const List& model_);
RcppExport SEXP bssm_bsm_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    __result = Rcpp::wrap(bsm_smoother(model_));
    return __result;
END_RCPP
}
// bsm_predict2
arma::mat bsm_predict2(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bsm_predict2(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bsm_predict2(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, seed, log_space));
    return __result;
END_RCPP
}
// bsm_predict
List bsm_predict(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::vec probs, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bsm_predict(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP probsSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bsm_predict(model_, prior_types, prior_pars, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, probs, seed, log_space));
    return __result;
END_RCPP
}
// bsm_particle_filter
Rcpp::List bsm_particle_filter(const List& model_, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_bsm_particle_filter(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(bsm_particle_filter(model_, nsim_states, seed));
    return __result;
END_RCPP
}
// bsm_particle_smoother
Rcpp::List bsm_particle_smoother(const List& model_, unsigned int nsim_states, unsigned int seed, unsigned int method);
RcppExport SEXP bssm_bsm_particle_smoother(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    __result = Rcpp::wrap(bsm_particle_smoother(model_, nsim_states, seed, method));
    return __result;
END_RCPP
}
// bsm_backward_simulate
Rcpp::List bsm_backward_simulate(const List& model_, unsigned int nsim_states, unsigned int seed, unsigned int nsim_store);
RcppExport SEXP bssm_bsm_backward_simulate(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP nsim_storeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_store(nsim_storeSEXP);
    __result = Rcpp::wrap(bsm_backward_simulate(model_, nsim_states, seed, nsim_store));
    return __result;
END_RCPP
}
// bsm_run_mcmc
List bsm_run_mcmc(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, bool sim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int seed, bool log_space, bool end_ram);
RcppExport SEXP bssm_bsm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP sim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type sim_states(sim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(bsm_run_mcmc(model_, prior_types, prior_pars, n_iter, sim_states, n_burnin, n_thin, gamma, target_acceptance, S, seed, log_space, end_ram));
    return __result;
END_RCPP
}
// bsm_run_mcmc_summary
List bsm_run_mcmc_summary(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int seed, bool log_space, bool end_ram);
RcppExport SEXP bssm_bsm_run_mcmc_summary(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(bsm_run_mcmc_summary(model_, prior_types, prior_pars, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, seed, log_space, end_ram));
    return __result;
END_RCPP
}
// gssm_loglik
double gssm_loglik(const List& model_);
RcppExport SEXP bssm_gssm_loglik(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    __result = Rcpp::wrap(gssm_loglik(model_));
    return __result;
END_RCPP
}
// gssm_filter
List gssm_filter(const List& model_);
RcppExport SEXP bssm_gssm_filter(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    __result = Rcpp::wrap(gssm_filter(model_));
    return __result;
END_RCPP
}
// gssm_fast_smoother
arma::mat gssm_fast_smoother(const List& model_);
RcppExport SEXP bssm_gssm_fast_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    __result = Rcpp::wrap(gssm_fast_smoother(model_));
    return __result;
END_RCPP
}
// gssm_sim_smoother
arma::cube gssm_sim_smoother(const List& model_, unsigned int nsim, unsigned int seed);
RcppExport SEXP bssm_gssm_sim_smoother(SEXP model_SEXP, SEXP nsimSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(gssm_sim_smoother(model_, nsim, seed));
    return __result;
END_RCPP
}
// gssm_smoother
List gssm_smoother(const List& model_);
RcppExport SEXP bssm_gssm_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    __result = Rcpp::wrap(gssm_smoother(model_));
    return __result;
END_RCPP
}
// gssm_run_mcmc
List gssm_run_mcmc(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, bool sim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, unsigned int seed, bool end_ram);
RcppExport SEXP bssm_gssm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP sim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP seedSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type sim_states(sim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(gssm_run_mcmc(model_, prior_types, prior_pars, n_iter, sim_states, n_burnin, n_thin, gamma, target_acceptance, S, Z_ind, H_ind, T_ind, R_ind, seed, end_ram));
    return __result;
END_RCPP
}
// gssm_run_mcmc_summary
List gssm_run_mcmc_summary(const List& model_, arma::uvec& prior_types, arma::vec& prior_pars, unsigned int n_iter, unsigned int n_thin, unsigned int n_burnin, double gamma, double target_acceptance, arma::mat S, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, unsigned int seed, bool end_ram);
RcppExport SEXP bssm_gssm_run_mcmc_summary(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_thinSEXP, SEXP n_burninSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP seedSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(gssm_run_mcmc_summary(model_, prior_types, prior_pars, n_iter, n_thin, n_burnin, gamma, target_acceptance, S, Z_ind, H_ind, T_ind, R_ind, seed, end_ram));
    return __result;
END_RCPP
}
// gssm_predict
List gssm_predict(const List& model_, arma::uvec& prior_types, arma::vec& prior_pars, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::vec& probs, unsigned int seed);
RcppExport SEXP bssm_gssm_predict(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP probsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(gssm_predict(model_, prior_types, prior_pars, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, H_ind, T_ind, R_ind, probs, seed));
    return __result;
END_RCPP
}
// gssm_predict2
arma::mat gssm_predict2(const List& model_, arma::uvec& prior_types, arma::vec& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, unsigned int seed);
RcppExport SEXP bssm_gssm_predict2(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(gssm_predict2(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, H_ind, T_ind, R_ind, seed));
    return __result;
END_RCPP
}
// ng_bsm_loglik
double ng_bsm_loglik(const List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_loglik(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_loglik(model_, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ng_bsm_filter
List ng_bsm_filter(const List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_filter(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ng_bsm_filter(model_, init_signal));
    return __result;
END_RCPP
}
// ng_bsm_fast_smoother
arma::mat ng_bsm_fast_smoother(const List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_fast_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ng_bsm_fast_smoother(model_, init_signal));
    return __result;
END_RCPP
}
// ng_bsm_sim_smoother
arma::cube ng_bsm_sim_smoother(const List& model_, unsigned nsim, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_sim_smoother(SEXP model_SEXP, SEXP nsimSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_sim_smoother(model_, nsim, init_signal, seed));
    return __result;
END_RCPP
}
// ng_bsm_smoother
List ng_bsm_smoother(const List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ng_bsm_smoother(model_, init_signal));
    return __result;
END_RCPP
}
// ng_bsm_run_mcmc
List ng_bsm_run_mcmc(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, bool da, bool pf);
RcppExport SEXP bssm_ng_bsm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP daSEXP, SEXP pfSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< bool >::type da(daSEXP);
    Rcpp::traits::input_parameter< bool >::type pf(pfSEXP);
    __result = Rcpp::wrap(ng_bsm_run_mcmc(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, da, pf));
    return __result;
END_RCPP
}
// ng_bsm_run_mcmc_is
List ng_bsm_run_mcmc_is(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, unsigned int method);
RcppExport SEXP bssm_ng_bsm_run_mcmc_is(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    __result = Rcpp::wrap(ng_bsm_run_mcmc_is(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, method));
    return __result;
END_RCPP
}
// ng_bsm_run_mcmc_summary
List ng_bsm_run_mcmc_summary(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, bool da, bool pf);
RcppExport SEXP bssm_ng_bsm_run_mcmc_summary(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP daSEXP, SEXP pfSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< bool >::type da(daSEXP);
    Rcpp::traits::input_parameter< bool >::type pf(pfSEXP);
    __result = Rcpp::wrap(ng_bsm_run_mcmc_summary(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, da, pf));
    return __result;
END_RCPP
}
// ng_bsm_run_mcmc_summary_is
List ng_bsm_run_mcmc_summary_is(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, unsigned int method);
RcppExport SEXP bssm_ng_bsm_run_mcmc_summary_is(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    __result = Rcpp::wrap(ng_bsm_run_mcmc_summary_is(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, method));
    return __result;
END_RCPP
}
// ng_bsm_predict2
arma::mat ng_bsm_predict2(const List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::vec& init_signal, unsigned int seed, bool log_space);
RcppExport SEXP bssm_ng_bsm_predict2(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(ng_bsm_predict2(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, init_signal, seed, log_space));
    return __result;
END_RCPP
}
// ng_bsm_importance_sample
List ng_bsm_importance_sample(const List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_importance_sample(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_importance_sample(model_, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ng_bsm_approx_model
List ng_bsm_approx_model(const List& model_, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_ng_bsm_approx_model(SEXP model_SEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    __result = Rcpp::wrap(ng_bsm_approx_model(model_, init_signal, max_iter, conv_tol));
    return __result;
END_RCPP
}
// ng_bsm_particle_filter
List ng_bsm_particle_filter(const List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_particle_filter(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_particle_filter(model_, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ngssm_loglik
double ngssm_loglik(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ngssm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ngssm_loglik(y, Z, T, R, a1, P1, phi, xreg, beta, distribution, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ngssm_filter
List ngssm_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_ngssm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ngssm_filter(y, Z, T, R, a1, P1, phi, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// ngssm_run_mcmc
List ngssm_run_mcmc(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int seed, bool end_ram);
RcppExport SEXP bssm_ngssm_run_mcmc(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(ngssm_run_mcmc(y, Z, T, R, a1, P1, phi, distribution, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, Z_ind, T_ind, R_ind, xreg, beta, init_signal, seed, end_ram));
    return __result;
END_RCPP
}
// ngssm_predict2
arma::mat ngssm_predict2(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_ngssm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ngssm_predict2(y, Z, T, R, a1, P1, phi, distribution, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, T_ind, R_ind, xreg, beta, init_signal, seed));
    return __result;
END_RCPP
}
// ngssm_importance_sample
List ngssm_importance_sample(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ngssm_importance_sample(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ngssm_importance_sample(y, Z, T, R, a1, P1, phi, distribution, xreg, beta, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ngssm_approx_model
List ngssm_approx_model(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_ngssm_approx_model(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    __result = Rcpp::wrap(ngssm_approx_model(y, Z, T, R, a1, P1, phi, distribution, xreg, beta, init_signal, max_iter, conv_tol));
    return __result;
END_RCPP
}
// svm_loglik
double svm_loglik(List model_, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_svm_loglik(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(svm_loglik(model_, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// svm_smoother
List svm_smoother(List model_, arma::vec init_signal);
RcppExport SEXP bssm_svm_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(svm_smoother(model_, init_signal));
    return __result;
END_RCPP
}
// svm_run_mcmc
List svm_run_mcmc(List model_, arma::vec& beta, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, bool da, bool pf);
RcppExport SEXP bssm_svm_run_mcmc(SEXP model_SEXP, SEXP betaSEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP daSEXP, SEXP pfSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< bool >::type da(daSEXP);
    Rcpp::traits::input_parameter< bool >::type pf(pfSEXP);
    __result = Rcpp::wrap(svm_run_mcmc(model_, beta, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, da, pf));
    return __result;
END_RCPP
}
// svm_run_mcmc_is
List svm_run_mcmc_is(List model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, unsigned int method);
RcppExport SEXP bssm_svm_run_mcmc_is(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    __result = Rcpp::wrap(svm_run_mcmc_is(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, method));
    return __result;
END_RCPP
}
// svm_importance_sample
List svm_importance_sample(List model_, unsigned int nsim_states, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_svm_importance_sample(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(svm_importance_sample(model_, nsim_states, init_signal, seed));
    return __result;
END_RCPP
}
// svm_approx_model
List svm_approx_model(List model_, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_svm_approx_model(SEXP model_SEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    __result = Rcpp::wrap(svm_approx_model(model_, init_signal, max_iter, conv_tol));
    return __result;
END_RCPP
}
// svm_particle_filter
List svm_particle_filter(List model_, unsigned int nsim_states, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_svm_particle_filter(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(svm_particle_filter(model_, nsim_states, init_signal, seed));
    return __result;
END_RCPP
}
// running_summary
void running_summary(const arma::mat& x, arma::mat& mean_x, arma::cube& cov_x, const unsigned int n);
RcppExport SEXP bssm_running_summary(SEXP xSEXP, SEXP mean_xSEXP, SEXP cov_xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mean_x(mean_xSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type cov_x(cov_xSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n(nSEXP);
    running_summary(x, mean_x, cov_x, n);
    return R_NilValue;
END_RCPP
}
// running_weighted_summary
void running_weighted_summary(const arma::cube& x, arma::mat& mean_x, arma::cube& cov_x, const arma::vec& weights);
RcppExport SEXP bssm_running_weighted_summary(SEXP xSEXP, SEXP mean_xSEXP, SEXP cov_xSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mean_x(mean_xSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type cov_x(cov_xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    running_weighted_summary(x, mean_x, cov_x, weights);
    return R_NilValue;
END_RCPP
}
// stratified_sample
arma::uvec stratified_sample(arma::vec p, arma::vec& r, unsigned int N);
RcppExport SEXP bssm_stratified_sample(SEXP pSEXP, SEXP rSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    __result = Rcpp::wrap(stratified_sample(p, r, N));
    return __result;
END_RCPP
}
