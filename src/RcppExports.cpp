// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cholupdate
arma::mat cholupdate(arma::mat L, arma::vec u);
RcppExport SEXP bssm_cholupdate(SEXP LSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    __result = Rcpp::wrap(cholupdate(L, u));
    return __result;
END_RCPP
}
// choldowndate
arma::mat choldowndate(arma::mat L, arma::vec u);
RcppExport SEXP bssm_choldowndate(SEXP LSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    __result = Rcpp::wrap(choldowndate(L, u));
    return __result;
END_RCPP
}
// dmvnorm1
arma::vec dmvnorm1(const arma::mat& x, const arma::vec& mean, arma::mat sigma, bool lwr, bool logd);
RcppExport SEXP bssm_dmvnorm1(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP lwrSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lwr(lwrSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    __result = Rcpp::wrap(dmvnorm1(x, mean, sigma, lwr, logd));
    return __result;
END_RCPP
}
// dmvnorm2
arma::vec dmvnorm2(const arma::mat& x, const arma::mat& mean, arma::mat sigma, bool lwr, bool logd, const arma::mat& A);
RcppExport SEXP bssm_dmvnorm2(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP lwrSEXP, SEXP logdSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lwr(lwrSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    __result = Rcpp::wrap(dmvnorm2(x, mean, sigma, lwr, logd, A));
    return __result;
END_RCPP
}
// intervals
arma::mat intervals(arma::mat& means, const arma::mat& sds, const arma::vec& probs, unsigned int n_ahead);
RcppExport SEXP bssm_intervals(SEXP meansSEXP, SEXP sdsSEXP, SEXP probsSEXP, SEXP n_aheadSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    __result = Rcpp::wrap(intervals(means, sds, probs, n_ahead));
    return __result;
END_RCPP
}
// bsm_loglik
double bsm_loglik(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_bsm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(bsm_loglik(y, Z, H, T, R, a1, P1, slope, seasonal, fixed, xreg, beta));
    return __result;
END_RCPP
}
// bsm_filter
List bsm_filter(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_bsm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(bsm_filter(y, Z, H, T, R, a1, P1, slope, seasonal, fixed, xreg, beta));
    return __result;
END_RCPP
}
// bsm_fast_smoother
arma::mat bsm_fast_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_bsm_fast_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(bsm_fast_smoother(y, Z, H, T, R, a1, P1, slope, seasonal, fixed, xreg, beta));
    return __result;
END_RCPP
}
// bsm_sim_smoother
arma::cube bsm_sim_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, unsigned int nsim, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_bsm_sim_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP nsimSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(bsm_sim_smoother(y, Z, H, T, R, a1, P1, nsim, slope, seasonal, fixed, xreg, beta, seed));
    return __result;
END_RCPP
}
// bsm_smoother
List bsm_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_bsm_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(bsm_smoother(y, Z, H, T, R, a1, P1, slope, seasonal, fixed, xreg, beta));
    return __result;
END_RCPP
}
// bsm_mcmc_full
List bsm_mcmc_full(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space, bool end_ram);
RcppExport SEXP bssm_bsm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(bsm_mcmc_full(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, fixed, xreg, beta, seed, log_space, end_ram));
    return __result;
END_RCPP
}
// bsm_mcmc_param
List bsm_mcmc_param(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space, bool sample_states, bool end_ram);
RcppExport SEXP bssm_bsm_mcmc_param(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP sample_statesSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< bool >::type sample_states(sample_statesSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(bsm_mcmc_param(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, fixed, xreg, beta, seed, log_space, sample_states, end_ram));
    return __result;
END_RCPP
}
// bsm_mcmc_parallel_full
List bsm_mcmc_parallel_full(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space, unsigned int nsim_states, unsigned int n_threads, arma::uvec seeds, bool end_ram);
RcppExport SEXP bssm_bsm_mcmc_parallel_full(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP nsim_statesSEXP, SEXP n_threadsSEXP, SEXP seedsSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seeds(seedsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(bsm_mcmc_parallel_full(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, fixed, xreg, beta, seed, log_space, nsim_states, n_threads, seeds, end_ram));
    return __result;
END_RCPP
}
// bsm_mcmc_summary
List bsm_mcmc_summary(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space, bool end_ram);
RcppExport SEXP bssm_bsm_mcmc_summary(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(bsm_mcmc_summary(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, fixed, xreg, beta, seed, log_space, end_ram));
    return __result;
END_RCPP
}
// bsm_predict2
arma::mat bsm_predict2(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bsm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bsm_predict2(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, slope, seasonal, fixed, xreg, beta, seed, log_space));
    return __result;
END_RCPP
}
// bsm_predict
List bsm_predict(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, arma::vec probs, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bsm_predict(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP probsSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bsm_predict(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, slope, seasonal, fixed, xreg, beta, probs, seed, log_space));
    return __result;
END_RCPP
}
// bsm_sample_states
arma::cube bsm_sample_states(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& theta, unsigned int nsim_states, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int n_threads, arma::uvec seeds);
RcppExport SEXP bssm_bsm_sample_states(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP thetaSEXP, SEXP nsim_statesSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP n_threadsSEXP, SEXP seedsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seeds(seedsSEXP);
    __result = Rcpp::wrap(bsm_sample_states(y, Z, H, T, R, a1, P1, theta, nsim_states, slope, seasonal, fixed, xreg, beta, n_threads, seeds));
    return __result;
END_RCPP
}
// bsm_bootstrap_smoother
Rcpp::List bsm_bootstrap_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, unsigned int nsim_states, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_bsm_bootstrap_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP nsim_statesSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(bsm_bootstrap_smoother(y, Z, H, T, R, a1, P1, nsim_states, slope, seasonal, fixed, xreg, beta, seed));
    return __result;
END_RCPP
}
// gssm_loglik
double gssm_loglik(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_gssm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(gssm_loglik(y, Z, H, T, R, a1, P1, xreg, beta));
    return __result;
END_RCPP
}
// gssm_filter
List gssm_filter(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_gssm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(gssm_filter(y, Z, H, T, R, a1, P1, xreg, beta));
    return __result;
END_RCPP
}
// gssm_fast_smoother
arma::mat gssm_fast_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_gssm_fast_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(gssm_fast_smoother(y, Z, H, T, R, a1, P1, xreg, beta));
    return __result;
END_RCPP
}
// gssm_sim_smoother
arma::cube gssm_sim_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, unsigned int nsim, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_gssm_sim_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP nsimSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(gssm_sim_smoother(y, Z, H, T, R, a1, P1, nsim, xreg, beta, seed));
    return __result;
END_RCPP
}
// gssm_smoother
List gssm_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_gssm_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(gssm_smoother(y, Z, H, T, R, a1, P1, xreg, beta));
    return __result;
END_RCPP
}
// gssm_mcmc_full
List gssm_mcmc_full(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool end_ram);
RcppExport SEXP bssm_gssm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(gssm_mcmc_full(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, Z_ind, H_ind, T_ind, R_ind, xreg, beta, seed, end_ram));
    return __result;
END_RCPP
}
// gssm_mcmc_param
List gssm_mcmc_param(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool end_ram);
RcppExport SEXP bssm_gssm_mcmc_param(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(gssm_mcmc_param(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, Z_ind, H_ind, T_ind, R_ind, xreg, beta, seed, end_ram));
    return __result;
END_RCPP
}
// gssm_mcmc_summary
List gssm_mcmc_summary(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_thin, unsigned int n_burnin, double gamma, double target_acceptance, arma::mat S, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool end_ram);
RcppExport SEXP bssm_gssm_mcmc_summary(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_thinSEXP, SEXP n_burninSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(gssm_mcmc_summary(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_thin, n_burnin, gamma, target_acceptance, S, Z_ind, H_ind, T_ind, R_ind, xreg, beta, seed, end_ram));
    return __result;
END_RCPP
}
// gssm_predict
List gssm_predict(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, arma::vec& probs, unsigned int seed);
RcppExport SEXP bssm_gssm_predict(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP probsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(gssm_predict(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, H_ind, T_ind, R_ind, xreg, beta, probs, seed));
    return __result;
END_RCPP
}
// gssm_predict2
arma::mat gssm_predict2(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_gssm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(gssm_predict2(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, H_ind, T_ind, R_ind, xreg, beta, seed));
    return __result;
END_RCPP
}
// ng_bsm_loglik
double ng_bsm_loglik(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_loglik(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ng_bsm_filter
List ng_bsm_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ng_bsm_filter(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// ng_bsm_fast_smoother
arma::mat ng_bsm_fast_smoother(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_fast_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ng_bsm_fast_smoother(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// ng_bsm_sim_smoother
arma::cube ng_bsm_sim_smoother(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, unsigned nsim, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_sim_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP nsimSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_sim_smoother(y, Z, T, R, a1, P1, phi, nsim, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal, seed));
    return __result;
END_RCPP
}
// ng_bsm_smoother
List ng_bsm_smoother(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ng_bsm_smoother(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// ng_bsm_mcmc_full
List ng_bsm_mcmc_full(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, arma::vec& init_signal, unsigned int method, unsigned int seed, bool log_space, unsigned int n_threads, arma::uvec seeds, bool end_ram, bool adapt_approx);
RcppExport SEXP bssm_ng_bsm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP n_threadsSEXP, SEXP seedsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seeds(seedsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    __result = Rcpp::wrap(ng_bsm_mcmc_full(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, noise, fixed, xreg, beta, init_signal, method, seed, log_space, n_threads, seeds, end_ram, adapt_approx));
    return __result;
END_RCPP
}
// ng_bsm_mcmc_param
List ng_bsm_mcmc_param(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, arma::vec& init_signal, unsigned int method, unsigned int seed, bool log_space, unsigned int n_threads, arma::uvec seeds, bool end_ram, bool adapt_approx);
RcppExport SEXP bssm_ng_bsm_mcmc_param(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP n_threadsSEXP, SEXP seedsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seeds(seedsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    __result = Rcpp::wrap(ng_bsm_mcmc_param(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, noise, fixed, xreg, beta, init_signal, method, seed, log_space, n_threads, seeds, end_ram, adapt_approx));
    return __result;
END_RCPP
}
// ng_bsm_mcmc_summary
List ng_bsm_mcmc_summary(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, arma::vec& init_signal, unsigned int method, unsigned int seed, bool log_space, unsigned int n_threads, arma::uvec seeds, bool end_ram, bool adapt_approx);
RcppExport SEXP bssm_ng_bsm_mcmc_summary(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP n_threadsSEXP, SEXP seedsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seeds(seedsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    __result = Rcpp::wrap(ng_bsm_mcmc_summary(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, noise, fixed, xreg, beta, init_signal, method, seed, log_space, n_threads, seeds, end_ram, adapt_approx));
    return __result;
END_RCPP
}
// ng_bsm_predict2
arma::mat ng_bsm_predict2(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, arma::vec& init_signal, unsigned int seed, bool log_space);
RcppExport SEXP bssm_ng_bsm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(ng_bsm_predict2(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, slope, seasonal, noise, fixed, xreg, beta, init_signal, seed, log_space));
    return __result;
END_RCPP
}
// ng_bsm_importance_sample
List ng_bsm_importance_sample(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_importance_sample(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_importance_sample(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ng_bsm_approx_model
List ng_bsm_approx_model(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_ng_bsm_approx_model(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    __result = Rcpp::wrap(ng_bsm_approx_model(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal, max_iter, conv_tol));
    return __result;
END_RCPP
}
// ng_bsm_bootstrap_filter
List ng_bsm_bootstrap_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_bootstrap_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_bootstrap_filter(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ng_bsm_gap_filter0
List ng_bsm_gap_filter0(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_gap_filter0(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_gap_filter0(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ng_bsm_gap_filter
List ng_bsm_gap_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_gap_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ng_bsm_gap_filter(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ngssm_loglik
double ngssm_loglik(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ngssm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ngssm_loglik(y, Z, T, R, a1, P1, phi, xreg, beta, distribution, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ngssm_filter
List ngssm_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_ngssm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ngssm_filter(y, Z, T, R, a1, P1, phi, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// ngssm_mcmc_full
List ngssm_mcmc_full(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int seed, bool end_ram);
RcppExport SEXP bssm_ngssm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    __result = Rcpp::wrap(ngssm_mcmc_full(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, Z_ind, T_ind, R_ind, xreg, beta, init_signal, seed, end_ram));
    return __result;
END_RCPP
}
// ngssm_predict2
arma::mat ngssm_predict2(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_ngssm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ngssm_predict2(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, T_ind, R_ind, xreg, beta, init_signal, seed));
    return __result;
END_RCPP
}
// ngssm_importance_sample
List ngssm_importance_sample(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ngssm_importance_sample(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(ngssm_importance_sample(y, Z, T, R, a1, P1, phi, distribution, xreg, beta, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// ngssm_approx_model
List ngssm_approx_model(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_ngssm_approx_model(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    __result = Rcpp::wrap(ngssm_approx_model(y, Z, T, R, a1, P1, phi, distribution, xreg, beta, init_signal, max_iter, conv_tol));
    return __result;
END_RCPP
}
// svm_loglik
double svm_loglik(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_svm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(svm_loglik(y, Z, T, R, a1, P1, phi, xreg, beta, init_signal, nsim_states, seed));
    return __result;
END_RCPP
}
// svm_bsf_loglik
double svm_bsf_loglik(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int nsim_states, unsigned int seed, double ess_treshold);
RcppExport SEXP bssm_svm_bsf_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP ess_tresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type ess_treshold(ess_tresholdSEXP);
    __result = Rcpp::wrap(svm_bsf_loglik(y, Z, T, R, a1, P1, phi, xreg, beta, init_signal, nsim_states, seed, ess_treshold));
    return __result;
END_RCPP
}
// svm_smoother
List svm_smoother(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, arma::vec init_signal);
RcppExport SEXP bssm_svm_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(svm_smoother(y, Z, T, R, a1, P1, phi, xreg, beta, init_signal));
    return __result;
END_RCPP
}
// svm_mcmc_full
List svm_mcmc_full(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int method, unsigned int seed, bool log_space, unsigned int n_threads, arma::uvec seeds, bool end_ram, bool adapt_approx);
RcppExport SEXP bssm_svm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP n_threadsSEXP, SEXP seedsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seeds(seedsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    __result = Rcpp::wrap(svm_mcmc_full(y, Z, T, R, a1, P1, phi, xreg, beta, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, method, seed, log_space, n_threads, seeds, end_ram, adapt_approx));
    return __result;
END_RCPP
}
// svm_mcmc_param
List svm_mcmc_param(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int method, unsigned int seed, bool log_space, unsigned int n_threads, arma::uvec seeds, bool end_ram, bool adapt_approx, double ess_treshold);
RcppExport SEXP bssm_svm_mcmc_param(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP n_threadsSEXP, SEXP seedsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP ess_tresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seeds(seedsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< double >::type ess_treshold(ess_tresholdSEXP);
    __result = Rcpp::wrap(svm_mcmc_param(y, Z, T, R, a1, P1, phi, xreg, beta, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, method, seed, log_space, n_threads, seeds, end_ram, adapt_approx, ess_treshold));
    return __result;
END_RCPP
}
// svm_importance_sample
List svm_importance_sample(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, unsigned int nsim_states, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_svm_importance_sample(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP nsim_statesSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(svm_importance_sample(y, Z, T, R, a1, P1, phi, xreg, beta, nsim_states, init_signal, seed));
    return __result;
END_RCPP
}
// svm_approx_model
List svm_approx_model(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_svm_approx_model(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    __result = Rcpp::wrap(svm_approx_model(y, Z, T, R, a1, P1, phi, xreg, beta, init_signal, max_iter, conv_tol));
    return __result;
END_RCPP
}
// svm_bootstrap_filter
List svm_bootstrap_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, unsigned int nsim_states, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_svm_bootstrap_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP nsim_statesSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(svm_bootstrap_filter(y, Z, T, R, a1, P1, phi, xreg, beta, nsim_states, init_signal, seed));
    return __result;
END_RCPP
}
// svm_gap_filter0
List svm_gap_filter0(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, unsigned int nsim_states, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_svm_gap_filter0(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP nsim_statesSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(svm_gap_filter0(y, Z, T, R, a1, P1, phi, xreg, beta, nsim_states, init_signal, seed));
    return __result;
END_RCPP
}
// svm_gap_filter
List svm_gap_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, unsigned int nsim_states, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_svm_gap_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP nsim_statesSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(svm_gap_filter(y, Z, T, R, a1, P1, phi, xreg, beta, nsim_states, init_signal, seed));
    return __result;
END_RCPP
}
// svm_bootstrap_filter2
List svm_bootstrap_filter2(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, arma::mat& xreg, arma::vec& beta, unsigned int nsim_states, arma::vec init_signal, unsigned int seed, double q);
RcppExport SEXP bssm_svm_bootstrap_filter2(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP nsim_statesSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    __result = Rcpp::wrap(svm_bootstrap_filter2(y, Z, T, R, a1, P1, phi, xreg, beta, nsim_states, init_signal, seed, q));
    return __result;
END_RCPP
}
// running_summary
void running_summary(const arma::mat& x, arma::mat& mean_x, arma::cube& cov_x, const unsigned int n);
RcppExport SEXP bssm_running_summary(SEXP xSEXP, SEXP mean_xSEXP, SEXP cov_xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mean_x(mean_xSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type cov_x(cov_xSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n(nSEXP);
    running_summary(x, mean_x, cov_x, n);
    return R_NilValue;
END_RCPP
}
// running_weighted_summary
void running_weighted_summary(const arma::cube& x, arma::mat& mean_x, arma::cube& cov_x, const arma::vec& weights);
RcppExport SEXP bssm_running_weighted_summary(SEXP xSEXP, SEXP mean_xSEXP, SEXP cov_xSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mean_x(mean_xSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type cov_x(cov_xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    running_weighted_summary(x, mean_x, cov_x, weights);
    return R_NilValue;
END_RCPP
}
// stratified_sample
arma::uvec stratified_sample(arma::vec p, arma::vec& r, unsigned int N);
RcppExport SEXP bssm_stratified_sample(SEXP pSEXP, SEXP rSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    __result = Rcpp::wrap(stratified_sample(p, r, N));
    return __result;
END_RCPP
}
