// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// conditional_dist_helper
void conditional_dist_helper(arma::cube& Vt, arma::cube& Ct);
RcppExport SEXP bssm_conditional_dist_helper(SEXP VtSEXP, SEXP CtSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Vt(VtSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Ct(CtSEXP);
    conditional_dist_helper(Vt, Ct);
    return R_NilValue;
END_RCPP
}
// uv_filter
double uv_filter(const double y, const arma::vec& Z, const double HH, const arma::mat& T, const arma::mat& RR, const arma::vec& C, arma::vec& at, arma::mat& Pt, const double zero_tol);
RcppExport SEXP bssm_uv_filter(SEXP ySEXP, SEXP ZSEXP, SEXP HHSEXP, SEXP TSEXP, SEXP RRSEXP, SEXP CSEXP, SEXP atSEXP, SEXP PtSEXP, SEXP zero_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double >::type HH(HHSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type at(atSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Pt(PtSEXP);
    Rcpp::traits::input_parameter< const double >::type zero_tol(zero_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(uv_filter(y, Z, HH, T, RR, C, at, Pt, zero_tol));
    return rcpp_result_gen;
END_RCPP
}
// bsm_run_mcmc
Rcpp::List bsm_run_mcmc(const Rcpp::List& model_, arma::uvec prior_types, arma::mat prior_pars, unsigned int n_iter, bool sim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, unsigned int seed, bool log_space, bool end_ram);
RcppExport SEXP bssm_bsm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP sim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type sim_states(sim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_run_mcmc(model_, prior_types, prior_pars, n_iter, sim_states, n_burnin, n_thin, gamma, target_acceptance, S, seed, log_space, end_ram));
    return rcpp_result_gen;
END_RCPP
}
