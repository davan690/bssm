// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bstsm_loglik
double bstsm_loglik(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_bstsm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(bstsm_loglik(y, Z, H, T, R, a1, P1, slope, seasonal, fixed, xreg, beta));
    return __result;
END_RCPP
}
// bstsm_filter
List bstsm_filter(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_bstsm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(bstsm_filter(y, Z, H, T, R, a1, P1, slope, seasonal, fixed, xreg, beta));
    return __result;
END_RCPP
}
// bstsm_fast_smoother
arma::mat bstsm_fast_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_bstsm_fast_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(bstsm_fast_smoother(y, Z, H, T, R, a1, P1, slope, seasonal, fixed, xreg, beta));
    return __result;
END_RCPP
}
// bstsm_sim_smoother
arma::cube bstsm_sim_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, unsigned int nsim, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_bstsm_sim_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP nsimSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(bstsm_sim_smoother(y, Z, H, T, R, a1, P1, nsim, slope, seasonal, fixed, xreg, beta, seed));
    return __result;
END_RCPP
}
// bstsm_smoother
List bstsm_smoother(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_bstsm_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(bstsm_smoother(y, Z, H, T, R, a1, P1, slope, seasonal, fixed, xreg, beta));
    return __result;
END_RCPP
}
// bstsm_mcmc_full
List bstsm_mcmc_full(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bstsm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bstsm_mcmc_full(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, fixed, xreg, beta, seed, log_space));
    return __result;
END_RCPP
}
// bstsm_mcmc_param
List bstsm_mcmc_param(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bstsm_mcmc_param(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bstsm_mcmc_param(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, fixed, xreg, beta, seed, log_space));
    return __result;
END_RCPP
}
// bstsm_mcmc_summary
List bstsm_mcmc_summary(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_thin, unsigned int n_burnin, double gamma, double target_acceptance, arma::mat& S, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bstsm_mcmc_summary(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_thinSEXP, SEXP n_burninSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bstsm_mcmc_summary(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_thin, n_burnin, gamma, target_acceptance, S, slope, seasonal, fixed, xreg, beta, seed, log_space));
    return __result;
END_RCPP
}
// bstsm_predict2
arma::mat bstsm_predict2(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bstsm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bstsm_predict2(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, slope, seasonal, fixed, xreg, beta, seed, log_space));
    return __result;
END_RCPP
}
// bstsm_predict
List bstsm_predict(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, arma::vec probs, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bstsm_predict(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP probsSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(bstsm_predict(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, slope, seasonal, fixed, xreg, beta, probs, seed, log_space));
    return __result;
END_RCPP
}
// bstsm_sample_states
arma::cube bstsm_sample_states(arma::vec& y, arma::mat& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& theta, unsigned int nsim_states, bool slope, bool seasonal, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int n_threads, arma::uvec seeds);
RcppExport SEXP bssm_bstsm_sample_states(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP thetaSEXP, SEXP nsim_statesSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP n_threadsSEXP, SEXP seedsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seeds(seedsSEXP);
    __result = Rcpp::wrap(bstsm_sample_states(y, Z, H, T, R, a1, P1, theta, nsim_states, slope, seasonal, fixed, xreg, beta, n_threads, seeds));
    return __result;
END_RCPP
}
// cholupdate
arma::mat cholupdate(arma::mat L, arma::vec u);
RcppExport SEXP bssm_cholupdate(SEXP LSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    __result = Rcpp::wrap(cholupdate(L, u));
    return __result;
END_RCPP
}
// choldowndate
arma::mat choldowndate(arma::mat L, arma::vec u);
RcppExport SEXP bssm_choldowndate(SEXP LSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u(uSEXP);
    __result = Rcpp::wrap(choldowndate(L, u));
    return __result;
END_RCPP
}
// guvssm_loglik
double guvssm_loglik(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_guvssm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(guvssm_loglik(y, Z, H, T, R, a1, P1, xreg, beta));
    return __result;
END_RCPP
}
// guvssm_filter
List guvssm_filter(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_guvssm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(guvssm_filter(y, Z, H, T, R, a1, P1, xreg, beta));
    return __result;
END_RCPP
}
// guvssm_fast_smoother
arma::mat guvssm_fast_smoother(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_guvssm_fast_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(guvssm_fast_smoother(y, Z, H, T, R, a1, P1, xreg, beta));
    return __result;
END_RCPP
}
// guvssm_sim_smoother
arma::cube guvssm_sim_smoother(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, unsigned int nsim, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_guvssm_sim_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP nsimSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(guvssm_sim_smoother(y, Z, H, T, R, a1, P1, nsim, xreg, beta, seed));
    return __result;
END_RCPP
}
// guvssm_smoother
List guvssm_smoother(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::mat& xreg, arma::vec& beta);
RcppExport SEXP bssm_guvssm_smoother(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP xregSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    __result = Rcpp::wrap(guvssm_smoother(y, Z, H, T, R, a1, P1, xreg, beta));
    return __result;
END_RCPP
}
// guvssm_mcmc_full
List guvssm_mcmc_full(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_guvssm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(guvssm_mcmc_full(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, Z_ind, H_ind, T_ind, R_ind, xreg, beta, seed));
    return __result;
END_RCPP
}
// guvssm_mcmc_param
List guvssm_mcmc_param(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_guvssm_mcmc_param(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(guvssm_mcmc_param(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, Z_ind, H_ind, T_ind, R_ind, xreg, beta, seed));
    return __result;
END_RCPP
}
// guvssm_mcmc_summary
List guvssm_mcmc_summary(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_thin, unsigned int n_burnin, double gamma, double target_acceptance, arma::mat& S, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_guvssm_mcmc_summary(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_thinSEXP, SEXP n_burninSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(guvssm_mcmc_summary(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_thin, n_burnin, gamma, target_acceptance, S, Z_ind, H_ind, T_ind, R_ind, xreg, beta, seed));
    return __result;
END_RCPP
}
// guvssm_predict
List guvssm_predict(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, arma::vec& probs, unsigned int seed);
RcppExport SEXP bssm_guvssm_predict(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP probsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(guvssm_predict(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, H_ind, T_ind, R_ind, xreg, beta, probs, seed));
    return __result;
END_RCPP
}
// guvssm_predict2
arma::mat guvssm_predict2(arma::vec& y, arma::cube& Z, arma::vec& H, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, unsigned int seed);
RcppExport SEXP bssm_guvssm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(guvssm_predict2(y, Z, H, T, R, a1, P1, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, H_ind, T_ind, R_ind, xreg, beta, seed));
    return __result;
END_RCPP
}
// intervals
arma::mat intervals(arma::mat& means, arma::mat& sds, arma::vec& probs, unsigned int n_ahead);
RcppExport SEXP bssm_intervals(SEXP meansSEXP, SEXP sdsSEXP, SEXP probsSEXP, SEXP n_aheadSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    __result = Rcpp::wrap(intervals(means, sds, probs, n_ahead));
    return __result;
END_RCPP
}
// ng_bstsm_loglik
double ng_bstsm_loglik(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_ng_bstsm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ng_bstsm_loglik(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// ng_bstsm_filter
List ng_bstsm_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_ng_bstsm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(ng_bstsm_filter(y, Z, T, R, a1, P1, phi, slope, seasonal, noise, fixed, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// ng_bstsm_mcmc_full
List ng_bstsm_mcmc_full(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, arma::vec& init_signal, unsigned int method, unsigned int seed, bool log_space);
RcppExport SEXP bssm_ng_bstsm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(ng_bstsm_mcmc_full(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, slope, seasonal, noise, fixed, xreg, beta, init_signal, method, seed, log_space));
    return __result;
END_RCPP
}
// ng_bstsm_predict2
arma::mat ng_bstsm_predict2(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec& phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, bool slope, bool seasonal, bool noise, arma::uvec fixed, arma::mat& xreg, arma::vec& beta, arma::vec& init_signal, unsigned int seed, bool log_space);
RcppExport SEXP bssm_ng_bstsm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP slopeSEXP, SEXP seasonalSEXP, SEXP noiseSEXP, SEXP fixedSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< bool >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< bool >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    __result = Rcpp::wrap(ng_bstsm_predict2(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, slope, seasonal, noise, fixed, xreg, beta, init_signal, seed, log_space));
    return __result;
END_RCPP
}
// nguvssm_loglik
double nguvssm_loglik(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_nguvssm_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(nguvssm_loglik(y, Z, T, R, a1, P1, phi, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// nguvssm_filter
List nguvssm_filter(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, arma::mat& xreg, arma::vec& beta, unsigned int distribution, arma::vec init_signal);
RcppExport SEXP bssm_nguvssm_filter(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP distributionSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    __result = Rcpp::wrap(nguvssm_filter(y, Z, T, R, a1, P1, phi, xreg, beta, distribution, init_signal));
    return __result;
END_RCPP
}
// nguvssm_mcmc_full
List nguvssm_mcmc_full(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, arma::vec& init_signal, unsigned int seed);
RcppExport SEXP bssm_nguvssm_mcmc_full(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(nguvssm_mcmc_full(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, Z_ind, T_ind, R_ind, xreg, beta, init_signal, seed));
    return __result;
END_RCPP
}
// nguvssm_predict2
arma::mat nguvssm_predict2(arma::vec& y, arma::mat& Z, arma::cube& T, arma::cube& R, arma::vec& a1, arma::mat& P1, arma::vec phi, unsigned int distribution, arma::vec& theta_lwr, arma::vec& theta_upr, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind, arma::mat& xreg, arma::vec& beta, arma::vec& init_signal, unsigned int seed);
RcppExport SEXP bssm_nguvssm_predict2(SEXP ySEXP, SEXP ZSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP phiSEXP, SEXP distributionSEXP, SEXP theta_lwrSEXP, SEXP theta_uprSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP xregSEXP, SEXP betaSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_lwr(theta_lwrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta_upr(theta_uprSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type xreg(xregSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    __result = Rcpp::wrap(nguvssm_predict2(y, Z, T, R, a1, P1, phi, distribution, theta_lwr, theta_upr, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, T_ind, R_ind, xreg, beta, init_signal, seed));
    return __result;
END_RCPP
}
