// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bsm_loglik
double bsm_loglik(const Rcpp::List& model_);
RcppExport SEXP bssm_bsm_loglik(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_loglik(model_));
    return rcpp_result_gen;
END_RCPP
}
// bsm_filter
Rcpp::List bsm_filter(const Rcpp::List& model_);
RcppExport SEXP bssm_bsm_filter(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_filter(model_));
    return rcpp_result_gen;
END_RCPP
}
// bsm_fast_smoother
arma::mat bsm_fast_smoother(const Rcpp::List& model_);
RcppExport SEXP bssm_bsm_fast_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_fast_smoother(model_));
    return rcpp_result_gen;
END_RCPP
}
// bsm_sim_smoother
arma::cube bsm_sim_smoother(const Rcpp::List& model_, unsigned int nsim, unsigned int seed);
RcppExport SEXP bssm_bsm_sim_smoother(SEXP model_SEXP, SEXP nsimSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_sim_smoother(model_, nsim, seed));
    return rcpp_result_gen;
END_RCPP
}
// bsm_smoother
Rcpp::List bsm_smoother(const Rcpp::List& model_);
RcppExport SEXP bssm_bsm_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_smoother(model_));
    return rcpp_result_gen;
END_RCPP
}
// bsm_ccov_smoother
Rcpp::List bsm_ccov_smoother(const Rcpp::List& model_);
RcppExport SEXP bssm_bsm_ccov_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_ccov_smoother(model_));
    return rcpp_result_gen;
END_RCPP
}
// bsm_predict2
arma::mat bsm_predict2(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bsm_predict2(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_predict2(model_, prior_types, prior_pars, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, seed, log_space));
    return rcpp_result_gen;
END_RCPP
}
// bsm_predict
Rcpp::List bsm_predict(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::vec probs, unsigned int seed, bool log_space);
RcppExport SEXP bssm_bsm_predict(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP probsSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_predict(model_, prior_types, prior_pars, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, probs, seed, log_space));
    return rcpp_result_gen;
END_RCPP
}
// bsm_particle_filter
Rcpp::List bsm_particle_filter(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_bsm_particle_filter(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_particle_filter(model_, nsim_states, seed));
    return rcpp_result_gen;
END_RCPP
}
// bsm_particle_filter2
Rcpp::List bsm_particle_filter2(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, bool bootstrap);
RcppExport SEXP bssm_bsm_particle_filter2(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP bootstrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type bootstrap(bootstrapSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_particle_filter2(model_, nsim_states, seed, bootstrap));
    return rcpp_result_gen;
END_RCPP
}
// bsm_particle_smoother
Rcpp::List bsm_particle_smoother(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, bool fs);
RcppExport SEXP bssm_bsm_particle_smoother(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP fsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type fs(fsSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_particle_smoother(model_, nsim_states, seed, fs));
    return rcpp_result_gen;
END_RCPP
}
// bsm_backward_simulate
Rcpp::List bsm_backward_simulate(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, unsigned int nsim_store);
RcppExport SEXP bssm_bsm_backward_simulate(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP nsim_storeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_store(nsim_storeSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_backward_simulate(model_, nsim_states, seed, nsim_store));
    return rcpp_result_gen;
END_RCPP
}
// bsm_run_mcmc
Rcpp::List bsm_run_mcmc(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, bool sim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int seed, bool log_space, bool end_ram);
RcppExport SEXP bssm_bsm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP sim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type sim_states(sim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_run_mcmc(model_, prior_types, prior_pars, n_iter, sim_states, n_burnin, n_thin, gamma, target_acceptance, S, seed, log_space, end_ram));
    return rcpp_result_gen;
END_RCPP
}
// bsm_run_mcmc_summary
Rcpp::List bsm_run_mcmc_summary(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int seed, bool log_space, bool end_ram);
RcppExport SEXP bssm_bsm_run_mcmc_summary(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP log_spaceSEXP, SEXP end_ramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    rcpp_result_gen = Rcpp::wrap(bsm_run_mcmc_summary(model_, prior_types, prior_pars, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, seed, log_space, end_ram));
    return rcpp_result_gen;
END_RCPP
}
// gssm_loglik
double gssm_loglik(const Rcpp::List& model_);
RcppExport SEXP bssm_gssm_loglik(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_loglik(model_));
    return rcpp_result_gen;
END_RCPP
}
// gssm_filter
Rcpp::List gssm_filter(const Rcpp::List& model_);
RcppExport SEXP bssm_gssm_filter(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_filter(model_));
    return rcpp_result_gen;
END_RCPP
}
// gssm_fast_smoother
arma::mat gssm_fast_smoother(const Rcpp::List& model_);
RcppExport SEXP bssm_gssm_fast_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_fast_smoother(model_));
    return rcpp_result_gen;
END_RCPP
}
// gssm_sim_smoother
arma::cube gssm_sim_smoother(const Rcpp::List& model_, unsigned int nsim, unsigned int seed);
RcppExport SEXP bssm_gssm_sim_smoother(SEXP model_SEXP, SEXP nsimSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_sim_smoother(model_, nsim, seed));
    return rcpp_result_gen;
END_RCPP
}
// gssm_smoother
Rcpp::List gssm_smoother(const Rcpp::List& model_);
RcppExport SEXP bssm_gssm_smoother(SEXP model_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_smoother(model_));
    return rcpp_result_gen;
END_RCPP
}
// gssm_run_mcmc
Rcpp::List gssm_run_mcmc(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, bool sim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, unsigned int seed, bool end_ram, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind);
RcppExport SEXP bssm_gssm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP sim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP end_ramSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type sim_states(sim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_run_mcmc(model_, prior_types, prior_pars, n_iter, sim_states, n_burnin, n_thin, gamma, target_acceptance, S, seed, end_ram, Z_ind, H_ind, T_ind, R_ind));
    return rcpp_result_gen;
END_RCPP
}
// gssm_run_mcmc_summary
Rcpp::List gssm_run_mcmc_summary(const Rcpp::List& model_, arma::uvec& prior_types, arma::vec& prior_pars, unsigned int n_iter, unsigned int n_thin, unsigned int n_burnin, double gamma, double target_acceptance, arma::mat S, unsigned int seed, bool end_ram, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind);
RcppExport SEXP bssm_gssm_run_mcmc_summary(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_thinSEXP, SEXP n_burninSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP end_ramSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_run_mcmc_summary(model_, prior_types, prior_pars, n_iter, n_thin, n_burnin, gamma, target_acceptance, S, seed, end_ram, Z_ind, H_ind, T_ind, R_ind));
    return rcpp_result_gen;
END_RCPP
}
// gssm_predict
Rcpp::List gssm_predict(const Rcpp::List& model_, arma::uvec& prior_types, arma::vec& prior_pars, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, arma::vec& probs, unsigned int seed);
RcppExport SEXP bssm_gssm_predict(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP probsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_predict(model_, prior_types, prior_pars, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, H_ind, T_ind, R_ind, probs, seed));
    return rcpp_result_gen;
END_RCPP
}
// gssm_predict2
arma::mat gssm_predict2(const Rcpp::List& model_, arma::uvec& prior_types, arma::vec& prior_pars, unsigned int n_iter, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec H_ind, arma::uvec T_ind, arma::uvec R_ind, unsigned int seed);
RcppExport SEXP bssm_gssm_predict2(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_predict2(model_, prior_types, prior_pars, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, H_ind, T_ind, R_ind, seed));
    return rcpp_result_gen;
END_RCPP
}
// gssm_particle_filter
Rcpp::List gssm_particle_filter(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_gssm_particle_filter(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_particle_filter(model_, nsim_states, seed));
    return rcpp_result_gen;
END_RCPP
}
// gssm_particle_smoother
Rcpp::List gssm_particle_smoother(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, unsigned int method);
RcppExport SEXP bssm_gssm_particle_smoother(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_particle_smoother(model_, nsim_states, seed, method));
    return rcpp_result_gen;
END_RCPP
}
// gssm_backward_simulate
Rcpp::List gssm_backward_simulate(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, unsigned int nsim_store);
RcppExport SEXP bssm_gssm_backward_simulate(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP nsim_storeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_store(nsim_storeSEXP);
    rcpp_result_gen = Rcpp::wrap(gssm_backward_simulate(model_, nsim_states, seed, nsim_store));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_loglik
double ng_bsm_loglik(const Rcpp::List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int method, unsigned int seed, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_ng_bsm_loglik(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_loglik(model_, init_signal, nsim_states, method, seed, max_iter, conv_tol));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_filter
Rcpp::List ng_bsm_filter(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_filter(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_filter(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_fast_smoother
arma::mat ng_bsm_fast_smoother(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_fast_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_fast_smoother(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_sim_smoother
arma::cube ng_bsm_sim_smoother(const Rcpp::List& model_, unsigned nsim, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_sim_smoother(SEXP model_SEXP, SEXP nsimSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_sim_smoother(model_, nsim, init_signal, seed));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_smoother
Rcpp::List ng_bsm_smoother(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_smoother(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_run_mcmc
Rcpp::List ng_bsm_run_mcmc(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, bool end_ram, bool adapt_approx, bool da, unsigned int sim_type);
RcppExport SEXP bssm_ng_bsm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP daSEXP, SEXP sim_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< bool >::type da(daSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_type(sim_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_run_mcmc(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, end_ram, adapt_approx, da, sim_type));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_run_mcmc_is
Rcpp::List ng_bsm_run_mcmc_is(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, unsigned int sim_type, bool const_m, const arma::uvec& seeds);
RcppExport SEXP bssm_ng_bsm_run_mcmc_is(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP sim_typeSEXP, SEXP const_mSEXP, SEXP seedsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_type(sim_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type const_m(const_mSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type seeds(seedsSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_run_mcmc_is(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, sim_type, const_m, seeds));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_run_mcmc_summary
Rcpp::List ng_bsm_run_mcmc_summary(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, bool da, unsigned int sim_type);
RcppExport SEXP bssm_ng_bsm_run_mcmc_summary(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP daSEXP, SEXP sim_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< bool >::type da(daSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_type(sim_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_run_mcmc_summary(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, da, sim_type));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_run_mcmc_summary_is
Rcpp::List ng_bsm_run_mcmc_summary_is(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, unsigned int sim_type, bool const_m, const arma::uvec& seeds);
RcppExport SEXP bssm_ng_bsm_run_mcmc_summary_is(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP sim_typeSEXP, SEXP const_mSEXP, SEXP seedsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_type(sim_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type const_m(const_mSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type seeds(seedsSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_run_mcmc_summary_is(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, sim_type, const_m, seeds));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_predict2
arma::mat ng_bsm_predict2(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::vec& init_signal, unsigned int seed, bool log_space);
RcppExport SEXP bssm_ng_bsm_predict2(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP log_spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type log_space(log_spaceSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_predict2(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, init_signal, seed, log_space));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_importance_sample
Rcpp::List ng_bsm_importance_sample(const Rcpp::List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ng_bsm_importance_sample(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_importance_sample(model_, init_signal, nsim_states, seed));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_approx_model
Rcpp::List ng_bsm_approx_model(const Rcpp::List& model_, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_ng_bsm_approx_model(SEXP model_SEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_approx_model(model_, init_signal, max_iter, conv_tol));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_particle_filter
Rcpp::List ng_bsm_particle_filter(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, bool bootstrap, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_particle_filter(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP bootstrapSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type bootstrap(bootstrapSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_particle_filter(model_, nsim_states, seed, bootstrap, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_particle_smoother
Rcpp::List ng_bsm_particle_smoother(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, unsigned int method, unsigned int type, arma::vec init_signal);
RcppExport SEXP bssm_ng_bsm_particle_smoother(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP methodSEXP, SEXP typeSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_particle_smoother(model_, nsim_states, seed, method, type, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ng_bsm_backward_simulate
Rcpp::List ng_bsm_backward_simulate(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, unsigned int nsim_store);
RcppExport SEXP bssm_ng_bsm_backward_simulate(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP nsim_storeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_store(nsim_storeSEXP);
    rcpp_result_gen = Rcpp::wrap(ng_bsm_backward_simulate(model_, nsim_states, seed, nsim_store));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_loglik
double ngssm_loglik(const Rcpp::List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int method, unsigned int seed, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_ngssm_loglik(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_loglik(model_, init_signal, nsim_states, method, seed, max_iter, conv_tol));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_filter
Rcpp::List ngssm_filter(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ngssm_filter(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_filter(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_fast_smoother
arma::mat ngssm_fast_smoother(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ngssm_fast_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_fast_smoother(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_sim_smoother
arma::cube ngssm_sim_smoother(const Rcpp::List& model_, unsigned nsim, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_ngssm_sim_smoother(SEXP model_SEXP, SEXP nsimSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_sim_smoother(model_, nsim, init_signal, seed));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_smoother
Rcpp::List ngssm_smoother(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_ngssm_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_smoother(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_run_mcmc
Rcpp::List ngssm_run_mcmc(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, bool end_ram, bool adapt_approx, bool da, unsigned int sim_type, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind);
RcppExport SEXP bssm_ngssm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP daSEXP, SEXP sim_typeSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< bool >::type da(daSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_type(sim_typeSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_run_mcmc(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, end_ram, adapt_approx, da, sim_type, Z_ind, T_ind, R_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_run_mcmc_is
Rcpp::List ngssm_run_mcmc_is(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, unsigned int sim_type, bool const_m, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind, const arma::uvec& seeds);
RcppExport SEXP bssm_ngssm_run_mcmc_is(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP sim_typeSEXP, SEXP const_mSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP seedsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_type(sim_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type const_m(const_mSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type seeds(seedsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_run_mcmc_is(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, sim_type, const_m, Z_ind, T_ind, R_ind, seeds));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_predict2
arma::mat ngssm_predict2(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat& S, unsigned int n_ahead, unsigned int interval, arma::uvec Z_ind, arma::uvec T_ind, arma::uvec R_ind, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_ngssm_predict2(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP n_aheadSEXP, SEXP intervalSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type R_ind(R_indSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_predict2(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, n_ahead, interval, Z_ind, T_ind, R_ind, init_signal, seed));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_importance_sample
Rcpp::List ngssm_importance_sample(const Rcpp::List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_ngssm_importance_sample(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_importance_sample(model_, init_signal, nsim_states, seed));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_approx_model
Rcpp::List ngssm_approx_model(const Rcpp::List& model_, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_ngssm_approx_model(SEXP model_SEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_approx_model(model_, init_signal, max_iter, conv_tol));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_particle_filter
Rcpp::List ngssm_particle_filter(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, bool bootstrap, arma::vec init_signal);
RcppExport SEXP bssm_ngssm_particle_filter(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP bootstrapSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type bootstrap(bootstrapSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_particle_filter(model_, nsim_states, seed, bootstrap, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_particle_smoother
Rcpp::List ngssm_particle_smoother(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, bool fs, bool bootstrap, arma::vec init_signal);
RcppExport SEXP bssm_ngssm_particle_smoother(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP fsSEXP, SEXP bootstrapSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type fs(fsSEXP);
    Rcpp::traits::input_parameter< bool >::type bootstrap(bootstrapSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_particle_smoother(model_, nsim_states, seed, fs, bootstrap, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// ngssm_backward_simulate
Rcpp::List ngssm_backward_simulate(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, unsigned int nsim_store);
RcppExport SEXP bssm_ngssm_backward_simulate(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP nsim_storeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_store(nsim_storeSEXP);
    rcpp_result_gen = Rcpp::wrap(ngssm_backward_simulate(model_, nsim_states, seed, nsim_store));
    return rcpp_result_gen;
END_RCPP
}
// svm_loglik
double svm_loglik(const Rcpp::List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int method, unsigned int seed, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_svm_loglik(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP methodSEXP, SEXP seedSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_loglik(model_, init_signal, nsim_states, method, seed, max_iter, conv_tol));
    return rcpp_result_gen;
END_RCPP
}
// svm_filter
Rcpp::List svm_filter(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_svm_filter(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_filter(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// svm_fast_smoother
arma::mat svm_fast_smoother(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_svm_fast_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_fast_smoother(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// svm_sim_smoother
arma::cube svm_sim_smoother(const Rcpp::List& model_, unsigned nsim, arma::vec init_signal, unsigned int seed);
RcppExport SEXP bssm_svm_sim_smoother(SEXP model_SEXP, SEXP nsimSEXP, SEXP init_signalSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_sim_smoother(model_, nsim, init_signal, seed));
    return rcpp_result_gen;
END_RCPP
}
// svm_smoother
Rcpp::List svm_smoother(const Rcpp::List& model_, arma::vec init_signal);
RcppExport SEXP bssm_svm_smoother(SEXP model_SEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_smoother(model_, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// svm_run_mcmc
Rcpp::List svm_run_mcmc(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, bool end_ram, bool adapt_approx, bool da, unsigned int sim_type, bool gkl);
RcppExport SEXP bssm_svm_run_mcmc(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP daSEXP, SEXP sim_typeSEXP, SEXP gklSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< bool >::type da(daSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_type(sim_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type gkl(gklSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_run_mcmc(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, end_ram, adapt_approx, da, sim_type, gkl));
    return rcpp_result_gen;
END_RCPP
}
// svm_run_mcmc_is
Rcpp::List svm_run_mcmc_is(const Rcpp::List& model_, arma::uvec& prior_types, arma::mat& prior_pars, unsigned int n_iter, unsigned int nsim_states, unsigned int n_burnin, unsigned int n_thin, double gamma, double target_acceptance, arma::mat S, arma::vec& init_signal, unsigned int seed, unsigned int n_threads, bool end_ram, bool adapt_approx, unsigned int sim_type, bool const_m, bool gkl, const arma::uvec& seeds);
RcppExport SEXP bssm_svm_run_mcmc_is(SEXP model_SEXP, SEXP prior_typesSEXP, SEXP prior_parsSEXP, SEXP n_iterSEXP, SEXP nsim_statesSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP init_signalSEXP, SEXP seedSEXP, SEXP n_threadsSEXP, SEXP end_ramSEXP, SEXP adapt_approxSEXP, SEXP sim_typeSEXP, SEXP const_mSEXP, SEXP gklSEXP, SEXP seedsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type prior_types(prior_typesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type prior_pars(prior_parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt_approx(adapt_approxSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sim_type(sim_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type const_m(const_mSEXP);
    Rcpp::traits::input_parameter< bool >::type gkl(gklSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type seeds(seedsSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_run_mcmc_is(model_, prior_types, prior_pars, n_iter, nsim_states, n_burnin, n_thin, gamma, target_acceptance, S, init_signal, seed, n_threads, end_ram, adapt_approx, sim_type, const_m, gkl, seeds));
    return rcpp_result_gen;
END_RCPP
}
// svm_importance_sample
Rcpp::List svm_importance_sample(const Rcpp::List& model_, arma::vec init_signal, unsigned int nsim_states, unsigned int seed);
RcppExport SEXP bssm_svm_importance_sample(SEXP model_SEXP, SEXP init_signalSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_importance_sample(model_, init_signal, nsim_states, seed));
    return rcpp_result_gen;
END_RCPP
}
// svm_approx_model
Rcpp::List svm_approx_model(const Rcpp::List& model_, arma::vec init_signal, unsigned int max_iter, double conv_tol);
RcppExport SEXP bssm_svm_approx_model(SEXP model_SEXP, SEXP init_signalSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv_tol(conv_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_approx_model(model_, init_signal, max_iter, conv_tol));
    return rcpp_result_gen;
END_RCPP
}
// svm_particle_filter
Rcpp::List svm_particle_filter(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, bool bootstrap, arma::vec init_signal);
RcppExport SEXP bssm_svm_particle_filter(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP bootstrapSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< bool >::type bootstrap(bootstrapSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_particle_filter(model_, nsim_states, seed, bootstrap, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// svm_particle_smoother
Rcpp::List svm_particle_smoother(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, unsigned int method, unsigned int type, arma::vec init_signal);
RcppExport SEXP bssm_svm_particle_smoother(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP methodSEXP, SEXP typeSEXP, SEXP init_signalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init_signal(init_signalSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_particle_smoother(model_, nsim_states, seed, method, type, init_signal));
    return rcpp_result_gen;
END_RCPP
}
// svm_backward_simulate
Rcpp::List svm_backward_simulate(const Rcpp::List& model_, unsigned int nsim_states, unsigned int seed, unsigned int nsim_store);
RcppExport SEXP bssm_svm_backward_simulate(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP nsim_storeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsim_store(nsim_storeSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_backward_simulate(model_, nsim_states, seed, nsim_store));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm2
arma::vec dmvnorm2(const arma::mat& x, const arma::mat& mean, arma::mat sigma, bool lwr, bool logd, const arma::mat& A);
RcppExport SEXP bssm_dmvnorm2(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP lwrSEXP, SEXP logdSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lwr(lwrSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm2(x, mean, sigma, lwr, logd, A));
    return rcpp_result_gen;
END_RCPP
}
// uv_filter
double uv_filter(const double y, const arma::vec& Z, const double HH, const arma::mat& T, const arma::mat& RR, const arma::vec& C, arma::vec& at, arma::mat& Pt, const double zero_tol);
RcppExport SEXP bssm_uv_filter(SEXP ySEXP, SEXP ZSEXP, SEXP HHSEXP, SEXP TSEXP, SEXP RRSEXP, SEXP CSEXP, SEXP atSEXP, SEXP PtSEXP, SEXP zero_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double >::type HH(HHSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type at(atSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Pt(PtSEXP);
    Rcpp::traits::input_parameter< const double >::type zero_tol(zero_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(uv_filter(y, Z, HH, T, RR, C, at, Pt, zero_tol));
    return rcpp_result_gen;
END_RCPP
}
// intervals
arma::mat intervals(arma::mat& means, const arma::mat& sds, const arma::vec& probs, unsigned int n_ahead);
RcppExport SEXP bssm_intervals(SEXP meansSEXP, SEXP sdsSEXP, SEXP probsSEXP, SEXP n_aheadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_ahead(n_aheadSEXP);
    rcpp_result_gen = Rcpp::wrap(intervals(means, sds, probs, n_ahead));
    return rcpp_result_gen;
END_RCPP
}
