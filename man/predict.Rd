% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R
\name{predict.gssm}
\alias{predict.bsm}
\alias{predict.gssm}
\alias{predict.ng_bsm}
\alias{predict.ngssm}
\title{Predictions for Gaussian State Space Models}
\usage{
\method{predict}{gssm}(object, n_iter, priors, newdata = NULL, n_ahead = 1,
  interval = "response", probs = c(0.05, 0.95), method = "quantile",
  return_MCSE = TRUE, n_burnin = floor(n_iter/2), n_thin = 1,
  gamma = 2/3, target_acceptance = 0.234, S,
  seed = sample(.Machine$integer.max, size = 1), ...)

\method{predict}{bsm}(object, n_iter, newdata = NULL, n_ahead = 1,
  interval = "response", probs = c(0.05, 0.95), method = "quantile",
  return_MCSE = TRUE, n_burnin = floor(n_iter/2), n_thin = 1,
  gamma = 2/3, target_acceptance = 0.234, S,
  seed = sample(.Machine$integer.max, size = 1), ...)

\method{predict}{ngssm}(object, n_iter, nsim_states, newdata = NULL,
  n_ahead = 1, interval = "mean", probs = c(0.05, 0.95),
  n_burnin = floor(n_iter/2), n_thin = 1, gamma = 2/3,
  target_acceptance = 0.234, S, seed = sample(.Machine$integer.max, size =
  1), newu = NULL, ...)

\method{predict}{ng_bsm}(object, n_iter, nsim_states, newdata = NULL,
  n_ahead = 1, interval = "mean", probs = c(0.05, 0.95),
  n_burnin = floor(n_iter/2), n_thin = 1, gamma = 2/3,
  target_acceptance = 0.234, S, seed = sample(.Machine$integer.max, size =
  1), newu = NULL, ...)
}
\arguments{
\item{object}{Model object.}

\item{n_iter}{Number of MCMC iterations.}

\item{priors}{Priors for the unknown parameters.}

\item{newdata}{Matrix containing the covariate values for the future time
points. Defaults to zero matrix of appropriate size.}

\item{n_ahead}{Number of steps ahead at which to predict.}

\item{interval}{Compute predictions on \code{"mean"} ("confidence interval") or
\code{"response"} ("prediction interval"). Defaults to \code{"response"}.}

\item{probs}{Desired quantiles. Defaults to \code{c(0.05, 0.95)}. Always includes median 0.5.}

\item{method}{Either \code{"parametric"} (default) or \code{"quantile"}.
Only used for linear-Gaussian case.}

\item{return_MCSE}{For method \code{"parametric"}, if \code{TRUE}, the Monte Carlo
standard errors are also returned.}

\item{n_burnin}{Length of the burn-in period which is disregarded from the
results. Defaults to \code{n_iter / 2}.}

\item{n_thin}{Thinning rate. Defaults to 1. Increase for large models in
order to save memory.}

\item{gamma}{Tuning parameter for the adaptation of RAM algorithm. Must be
between 0 and 1 (not checked).}

\item{target_acceptance}{Target acceptance ratio for RAM. Defaults to 0.234.}

\item{S}{Initial value for the lower triangular matrix of RAM
algorithm, so that the covariance matrix of the Gaussian proposal
distribution is \eqn{SS'}.}

\item{seed}{Seed for the random number generator.}

\item{...}{Ignored.}

\item{nsim_states}{Number of samples used in importance sampling.}

\item{newu}{Vector of length \code{n_ahead} defining the future values of \eqn{u}.
Defaults to 1.}
}
\value{
List containing the mean predictions, quantiles and Monte Carlo
standard errors .
}
\description{
Posterior intervals of future observations or their means
(success probabilities in binomial case) for Gaussian models. These are
computed using either the quantile method where the intervals are computed
as empirical quantiles the posterior sample, or parametric method by
Helske (2016).
}
\examples{
require("graphics")
y <- log10(JohnsonJohnson)
prior <- uniform(0.01, 0, 1)
model <- bsm(y, sd_y = prior, sd_level = prior,
  sd_slope = prior, sd_seasonal = prior)

pred1 <- predict(model, n_iter = 5000, n_ahead = 8)
pred2 <- predict(StructTS(y, type = "BSM"), n.ahead = 8)

ts.plot(pred1$mean, pred1$intervals[,-2], pred2$pred +
cbind(0, -qnorm(0.95) * pred2$se, qnorm(0.95) * pred2$se),
  col = c(1, 1, 1, 2, 2, 2))

data("poisson_series")
model <- ng_bsm(poisson_series, sd_level = halfnormal(0.1, 1),
  sd_slope=halfnormal(0.01, 0.1), distribution = "poisson")
pred <- predict(model, n_iter = 1e4, nsim = 10, n_ahead = 10,
  probs = seq(0.05,0.95, by = 0.05))
library("ggplot2")
autoplot(pred, median_color = "blue", mean_color = "red")

}

